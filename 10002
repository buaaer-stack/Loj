#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <iostream>
#include <string>
#include <algorithm>
#include <queue>
using namespace std;
#define mem(a,num) memset(a,num,sizeof(a))
#define FOR(i,j,n) for(int i=j;i<=n;i++)
#define POR(i,n,j) for(int i=n;i>=j;i--)
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
#define ll long long
ll read(){
   ll s=0,w=1;                                              
   char ch=getchar();
   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}
   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();
   return s*w;
}

int n;
double l,w;

struct node{
    double l,r;
};

struct node a[15010];

bool cmp(node a,node b){
    return a.l<b.l;
}



int main(){
    int t;
    cin>>t;
    while(t--){
        //不能简单的看半径，而是看它和上面边的交点，当然没有交点就只能放弃
        cin>>n>>l>>w;
        //cout<<"n:"<<n<<endl;
        double x,y;
        int cnt=0;
        for(int i=1;i<=n;i++){
            cin>>x>>y;
            if(y<w/2)continue;
            double tmp=sqrt(y*y-w*w/4);
            a[++cnt].l=x-tmp;
            a[cnt].r=x+tmp;
        }
        sort(a+1,a+1+cnt,cmp);
        //特判能不能到达左右两边
        double t=0;
        int ans=0,i=1,flag=0;
        while(t<l){
            ans++;
            double s=t;
            while(a[i].l<=s&&i<=cnt){
                if(t<a[i].r)t=a[i].r;
                i++;
            }
            if(t==s&&s<l){
                printf("-1\n");
                flag=1;
                break;
            }
        }
        if(!flag)printf("%d\n",ans);
        
    }
}
