#include <bits/stdc++.h>
using namespace std;
const int MaxN = 100010, MaxM = 500010;
int a[1001][1001];
struct edge
{
    int to, dis, next;
};

edge e[MaxM];
int head[MaxN], dis[MaxN], cnt;
bool vis[MaxN];
int n, m, s;

inline void add_edge( int u, int v, int d )
{
    cnt++;
    e[cnt].dis = d;
    e[cnt].to = v;
    e[cnt].next = head[u];
    head[u] = cnt;
}

struct node
{
    int dis;
    int pos;
    bool operator <( const node &x )const
    {
        return x.dis < dis;
    }
};

std::priority_queue<node> q;


inline void dijkstra()
{
    dis[s] = 0;
    q.push( ( node ){0, s} );
    while( !q.empty() )
    {
        node tmp = q.top();
        q.pop();
        int x = tmp.pos, d = tmp.dis;
        if( vis[x] )
            continue;
        vis[x] = 1;
        for( int i = head[x]; i; i = e[i].next )
        {
            int y = e[i].to;
            if( dis[y] > dis[x] + e[i].dis )
            {
                dis[y] = dis[x] + e[i].dis;
                if( !vis[y] )
                {
                    q.push( ( node ){dis[y], y} );
                }
            }
        }
    }
}
int dis1[MaxN];

int main(){
    cin>>n>>m>>s;
    int x,y,z;
    for(int i = 1; i <= n; ++i)dis[i] = 0x7fffffff;
    for(int i=1;i<=m;i++){
        //这是一个单源最短路
        cin>>x>>y>>z;
        if(a[x][y]==0){
            a[x][y]=z;
        }
        else{
            a[x][y]=min(a[x][y],z);
        }
        
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(a[i][j]!=0){
                add_edge(i,j,a[i][j]);
                //add_edge(j,i,a[j][i]);
            }
        }
    }
    dijkstra();
    for(int i=1;i<=n;i++){
        dis1[i]=dis[i];
    }
    cnt=0;
    memset(head,0,sizeof(head));
    memset(vis,0,sizeof(vis));
    for(int i = 1; i <= n; ++i)dis[i] = 0x7fffffff;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(a[i][j]!=0){
                add_edge(j,i,a[i][j]);
            }
        }
    }

    dijkstra();
    int maxa=0;
    for(int i=1;i<=n;i++){
        maxa=max(maxa,dis[i]+dis1[i]);
        //cout<<dis[i]<<endl;
    }
    cout<<maxa<<endl;
}
