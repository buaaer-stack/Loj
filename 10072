
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <algorithm>
#include <math.h>
#include <iostream>
#include <string>
#include <algorithm>
#include <queue>
using namespace std;
#define mem(a,num) memset(a,num,sizeof(a))
#define FOR(i,j,n) for(int i=j;i<=n;i++)
#define POR(i,n,j) for(int i=n;i>=j;i--)
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
#define ll long long
#define maxn 105
#define INF 0xfffffff
int read(){
   int s=0,w=1;                                              
   char ch=getchar();
   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}
   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();
   return s*w;
}

int f[maxn][maxn],e[maxn][maxn],pre[maxn][maxn],path[maxn];
ll ans=0;
int n,m;
int min_ring,cnt;

void init(){
    FOR(i,1,n){
        FOR(j,1,n){
            f[i][j]=INF;
            e[i][j]=INF;
            pre[i][j]=i; //i->j最短路上j的前一个节点
        }
    }
}


void floyd(){
    min_ring=INF;
    FOR(k,1,n){
        FOR(i,1,k-1){
            FOR(j,1,i-1){
                if(f[i][j]+e[i][k]+e[k][j]<min_ring){
                    min_ring=f[i][j]+e[i][k]+e[k][j];
                    cnt=0;
                    int tmp=pre[i][j];
                    while(tmp!=i){
                        path[++cnt]=tmp;
                        tmp=pre[i][tmp];
                    }
                    path[++cnt]=i;
                    path[++cnt]=k;
                    path[++cnt]=j;
                }
            }
        }
        FOR(i,1,n){
            FOR(j,1,n){
                if(f[i][k]+f[k][j]<f[i][j]){
                    f[i][j]=f[i][k]+f[k][j];
                    pre[i][j]=pre[k][j];
                }
            }
        }
    }
}



int main(){
    n=read();
    m=read();
    init();
    FOR(i,1,m){
        int u=read(),v=read(),w=read();
        f[u][v]=f[v][u]=e[u][v]=e[v][u]=min(w,f[u][v]);
    }
    floyd();
    if(min_ring==INF){
        printf("No solution.\n");
    }
    else{
        FOR(i,1,cnt)cout<<path[i]<<" ";
    }
}
